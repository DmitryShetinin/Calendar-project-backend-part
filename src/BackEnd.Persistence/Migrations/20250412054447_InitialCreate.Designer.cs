// <auto-generated />
using System;
using System.Collections.Generic;
using BackEnd.Persistence.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackEnd.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250412054447_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Persistence.Entities.CalendarEntity", b =>
                {
                    b.Property<Guid>("Calendarid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("calendarid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("Userid")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Calendarid")
                        .HasName("calendars_pkey");

                    b.ToTable("calendars", (string)null);
                });

            modelBuilder.Entity("BackEnd.Persistence.Entities.EventEntity", b =>
                {
                    b.Property<Guid?>("Event1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event1")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("Allday")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("Calendarid")
                        .HasColumnType("uuid")
                        .HasColumnName("calendarid");

                    b.Property<string>("Discriotion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Enddate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Participants")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Reminder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Startdate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Userid")
                        .HasColumnType("uuid");

                    b.HasKey("Event1")
                        .HasName("events_pkey");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("BackEnd.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
